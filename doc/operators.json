{"functions":[{"description":"Get the length of a string.","tags":{"example":["\"hello world\" length # returns 11"]},"name":"length","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Int","description":"Length of the string"}]},{"description":"Get the length of an array.","tags":{"example":["[ \"a\" 3 ] length # returns 2"]},"name":"length","params":[{"name":"arr","type":":Arr","description":"Array"}],"returns":[{"type":":Int","description":"Length of the array"}]},{"description":"Get the i-th character of a string.","tags":{"example":["\"hello\" 1 get # returns \"e\""]},"name":"get","params":[{"name":"str","type":":Str","description":"String"},{"name":"i","type":":Int","description":"Zero-based index of a character in the string"}],"returns":[{"type":":Str","description":"The i-th character of the string"}]},{"description":"Get the i-th item of an array.","tags":{},"name":"get","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"i","type":":Int","description":"Zero-based index of the item to get"}],"returns":[{"type":":Obj","description":"The i-th element in the array"}]},{"description":"Get the item after the first item in the array that is equal to the given key.\nE.g., `[ :a 1 :b 2 ] :a 0 get` would return the value after `:a`, which is `1`.","tags":{},"name":"get","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"key","type":":Obj","description":"Key"}],"returns":[{"type":":Obj","description":"The value at the given key or nil if the key is not found"}]},{"description":"Set the i-th character of a string.","tags":{"example":["\"rest\" 1 \"u\" set # returns \"rust\""]},"name":"set","params":[{"name":"str","type":":Str","description":"String"},{"name":"i","type":":Int","description":"Zero-based index of a character in the string"},{"name":"value","type":":Str","description":"New character"}],"returns":[{"type":":Str","description":"The updated stringPolar"}]},{"description":"Set the i-th item of an array.","tags":{},"name":"set","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"i","type":":Int","description":"Zero-based index of the item to set"},{"name":"value","type":":Obj","description":"New value"}],"returns":[{"type":":Arr","description":"The updated array"}]},{"description":"Set the item after the first item in the array that is equal to the given key. If the key is not found, it is appended to the array.","tags":{},"name":"set","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"key","type":":Obj","description":"Key"}],"returns":[{"type":":Arr","description":"The updated array"}]},{"description":"Get the item after the first item in the array that is equal to the given key.\nE.g., `[ :a 1 :b 2 ] :a 0 key-get` would return the value after `:a`, which is `1`.","tags":{},"name":"key-get","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"key","type":":Obj","description":"Key"},{"name":"default","type":":Obj","description":"Default value that is returned when the key is not found in the array"}],"returns":[{"type":":Obj","description":"The value at the given key or the default value if the key is not found"}]},{"description":"Set the item after the first item in the array that is equal to the given key. If the key is not found, it is appended to the array.","tags":{},"name":"key-set","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"key","type":":Obj","description":"Key"},{"name":"value","type":":Obj","description":"Value to assign at the given key"}],"returns":[{"type":":Arr","description":"The modified array"}]},{"description":"Update the value of a key in the array by executing an executable array.","tags":{},"name":"key-update","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"key","type":":Obj","description":"Key"},{"name":"default","type":":Obj","description":"Default value that is used when the key is not found in the array"},{"name":"updater","type":":ExeArr","description":"Executable array that is called with the value of the key (or the default value) on top of the stack and must push the updated value on the stack"}],"returns":[{"type":":Arr","description":"The modified array"}]},{"description":"Update the value of a nested array. The keys are the indices of the value.","tags":{},"name":"path-set","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"keys","type":":Arr","description":"Keys to the position of the value to update"},{"name":"value","type":":Obj","description":"Value to assign at the given index"}],"returns":[{"type":":Arr","description":"The modified array"}]},{"description":"Set the value of a key in a nested array. The keys are the keys of the value.","tags":{},"name":"path-key-set","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"keys","type":":Arr","description":"Path of keys to the value to change"},{"name":"value","type":":Obj","description":"Value to assign at the given key"}],"returns":[{"type":":Arr","description":"The modified array"}]},{"description":"Update the value of a key in a nested array by executing an executable array. The keys are the keys of the value.","tags":{},"name":"path-update","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"keys","type":":Arr","description":"Path of keys to the value to update"},{"name":"default","type":":Obj","description":"Default value that is used when the key is not found in the array"},{"name":"updater","type":":ExeArr","description":"Executable array that is called with the value of the key (or the default value) on top of the stack and must push the updated value on the stack"}],"returns":[{"type":":Arr","description":"The modified array"}]},{"description":"Shuffle the given array.\nInternally, this function uses rand-int, so it is deterministic when the seed is known.","tags":{},"name":"shuffle","params":[{"name":"arr","type":":Arr","description":"Array"}],"returns":[{"type":":Arr","description":"The shuffled array"}]},{"description":"Reverse the given array.","tags":{},"name":"reverse","params":[{"name":"arr","type":":Arr","description":"Array"}],"returns":[{"type":":Arr","description":"A new array with the items in reverse order"}]},{"description":"Reverse the given string.","tags":{"example":["\"olleh\" reverse # returns \"hello\""]},"name":"reverse","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Str","description":"The reversed string"}]},{"description":"Append a value to an array.","tags":{},"name":"append","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"value","type":":Obj","description":"Value to append"}],"returns":[{"type":":Arr","description":"Modified array"}]},{"description":"Remove the first item that is equal to the given value from the array.","tags":{},"name":"remove","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"value","type":":Obj","description":"Value to remove"}],"returns":[{"type":":Arr","description":"Array with the first occurence of the given value removed"}]},{"description":"Remove the item at the given zero-based index from the array.","tags":{},"name":"remove-at","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"index","type":":Int","description":"Zero-based index of the item to remove"}],"returns":[{"type":":Arr","description":"Array with the given index removed"}]},{"description":"Remove the character at the given zero-based index from the string.","tags":{"example":["\"hello!\" 5 remove-at # returns \"hello\""]},"name":"remove-at","params":[{"name":"str","type":":Str","description":"String"},{"name":"index","type":":Int","description":"Zero-based index of the character to remove"}],"returns":[{"type":":Str","description":"String with the character at the given index removed"}]},{"description":"Find the index of the first occurence of an object in an array.","tags":{},"name":"find","params":[{"name":"arr","type":":Arr","description":"Array to search in"},{"name":"value","type":":Obj","description":"Object to search for"}],"returns":[{"type":":Int","description":"Zero-based index of the object in the array or nil if not found"}]},{"description":"Find the index of the first occurence of a substring in a string.","tags":{"example":["\"hello\" \"l\" find # returns 2"]},"name":"find","params":[{"name":"str","type":":Str","description":"String to search in"},{"name":"value","type":":Obj","description":"Value to search for, will be converted to :Str automatically"}],"returns":[{"type":":Int","description":"Zero-based index of the substring in the string or nil if not found"}]},{"description":"Find the index of the first occurence of an object in an array, beginning at the given start index.","tags":{},"name":"find-from","params":[{"name":"arr","type":":Arr","description":"Array to search in"},{"name":"value","type":":Obj","description":"Object to search for"},{"name":"startAt","type":":Int","description":"Zero-based start index of the search"}],"returns":[{"type":":Int","description":"Zero-based index of the object in the array or nil if not found"}]},{"description":"Find the index of the first occurence of a substring in a string.","tags":{"example":["\"hello world\" \"l\" 4 find-from # returns 9"]},"name":"find-from","params":[{"name":"str","type":":Str","description":"String to search in"},{"name":"value","type":":Obj","description":"Value to search for, will be converted to :Str automatically"},{"name":"startAt","type":":Int","description":"Zero-based start index of the search"}],"returns":[{"type":":Int","description":"Zero-based index of the substring in the string or nil if not found"}]},{"description":"Check if an array contains the given value.","tags":{},"name":"contains","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"value","type":":Obj","description":"Value"}],"returns":[{"type":":Bool","description":"True if the array contains the given value, false otherwise"}]},{"description":"Check if a string contains the given value.","tags":{"example":["\"this is a test\" \"a\" contains # returns true"]},"name":"contains","params":[{"name":"str","type":":Str","description":"String"},{"name":"value","type":":Obj","description":"Value, will be converted to :Str automatically"}],"returns":[{"type":":Bool","description":"True if the string contains the given value"}]},{"description":"Get a portion of an array, including all items from start (inclusive) to\nend (exclusive). If no end is specified, all items from start will be included.","tags":{},"name":"slice","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"start","type":":Int","description":"Zero-based index of the first item to include"},{"name":"end","type":":Int","description":"Zero-based index of the first item that should not be included (optional)"}],"returns":[{"type":":Arr","description":"A new array containing the items in the given range"}]},{"description":"Get a portion of a string, including all characters from start (inclusive) to\nend (exclusive). If no end is specified, all characters from start will be included.","tags":{"example":["\"Hello!\" 1 slice # returns \"ello!\"","\"Hello! 1 5 slice # returns \"hello\""]},"name":"slice","params":[{"name":"str","type":":Str","description":"String"},{"name":"start","type":":Int","description":"Zero-based index of the first character to include"},{"name":"end","type":":Int","description":"Zero-based index of the first character that should not be included (optional)"}],"returns":[{"type":":Str","description":"The extracted substring"}]},{"description":"Insert an item into an array.","tags":{},"name":"insert","params":[{"name":"arr","type":":Arr","description":"Array"},{"name":"index","type":":Int","description":"Zero-based index at which to insert the item"},{"name":"value","type":":Obj","description":"Item to insert"}],"returns":[{"type":":Arr","description":"Array with the item inserted"}]},{"description":"Insert a character into a string.","tags":{"example":["\"BC\" 0 65 insert # returns \"ABC\""]},"name":"insert","params":[{"name":"str","type":":Str","description":"String"},{"name":"index","type":":Int","description":"Zero-based index at which to insert the character"},{"name":"character","type":":Int","description":"Character to insert"}],"returns":[{"type":":Str","description":"String with the character inserted"}]},{"description":"Insert a character into a string.","tags":{"example":["\"tt\" 1 \"es\" insert # returns \"test\""]},"name":"insert","params":[{"name":"str","type":":Str","description":"String"},{"name":"index","type":":Int","description":"Zero-based index at which to insert the string"},{"name":"insert","type":":Str","description":"String to insert"}],"returns":[{"type":":Str","description":"String with the other string inserted"}]},{"description":"Create a new array with the given length and initialize it.","tags":{},"name":"array","params":[{"name":"length","type":":Int","description":"Length of the array"},{"name":"initializer","type":":ExeArr","description":"Executable array that will be executed for every array entry, the zero-based index is put on top of the stack and the value that the executable array pushes onto the stack is put into the array"}],"returns":[{"type":":Arr","description":"Array with the given length and values produced by the initializer"}]},{"description":"Create a new array with the given length and set all items to the given value.","tags":{},"name":"array","params":[{"name":"length","type":":Int","description":"Length of the array"},{"name":"value","type":":Obj","description":"Value to set all array items to"}],"returns":[{"type":":Arr","description":"Array with the given length and values"}]},{"description":"Sort an array.","tags":{},"name":"sort","params":[{"name":"arr","type":":Arr","description":"Array"}],"returns":[{"type":":Arr","description":"Sorted array"}]},{"description":"Check if a is smaller than b.","tags":{"example":["1 2 < # true"]},"name":"<","params":[{"name":"a","type":":Num","description":"Number a"},{"name":"b","type":":Num","description":"Number b"}],"returns":[{"type":":Bool","description":"true if a is smaller than b, false otherwise"}]},{"description":"Check if the string a appears before b when sorted alphabetically.","tags":{"example":["\"zebra\" \"apple\" < # false"]},"name":"<","params":[{"name":"a","type":":Str","description":"String a"},{"name":"b","type":":Str","description":"String b"}],"returns":[{"type":":Bool","description":"true if a comes before b in alphabetical order, false otherwise"}]},{"description":"Check if a is smaller than or equal to b.","tags":{},"name":"<=","params":[{"name":"a","type":":Num","description":"Number a"},{"name":"b","type":":Num","description":"Number b"}],"returns":[{"type":":Bool","description":"true if a is smaller than or equal to b, false otherwise"}]},{"description":"Check if the string a equals string b or appears before b when sorted alphabetically.","tags":{},"name":"<=","params":[{"name":"a","type":":Str","description":"String a"},{"name":"b","type":":Str","description":"String b"}],"returns":[{"type":":Bool","description":"true if a equals b or comes before b in alphabetical order, false otherwise"}]},{"description":"Check if a is greater than b.","tags":{},"name":">","params":[{"name":"a","type":":Num","description":"Number a"},{"name":"b","type":":Num","description":"Number b"}],"returns":[{"type":":Bool","description":"true if a is greater than b, false otherwise"}]},{"description":"Check if the string a appears after b when sorted alphabetically.","tags":{},"name":">","params":[{"name":"a","type":":Str","description":"String a"},{"name":"b","type":":Str","description":"String b"}],"returns":[{"type":":Bool","description":"true if a comes after b in alphabetical order, false otherwise"}]},{"description":"Check if a is greater than or equal to b.","tags":{},"name":">=","params":[{"name":"a","type":":Num","description":"Number a"},{"name":"b","type":":Num","description":"Number b"}],"returns":[{"type":":Bool","description":"true if a is greater than or equal to b, false otherwise"}]},{"description":"Check if the string a equals string b or appears after b when sorted alphabetically.","tags":{},"name":">=","params":[{"name":"a","type":":Str","description":"String a"},{"name":"b","type":":Str","description":"String b"}],"returns":[{"type":":Bool","description":"true if a equals b or comes after b in alphabetical order, false otherwise"}]},{"description":"Check if two objects are equal, according to the following rules:\n\n* Numbers, booleans and strings are equal if they have the same value\n* Symbols are equal if they have the same name\n* Arrays are equal if all entries are equal\n","tags":{},"name":"=","params":[{"name":"a","type":":Obj","description":"Object a"},{"name":"b","type":":Obj","description":"Object b"}],"returns":[{"type":":Bool","description":"true if the objects are equal, false otherwise"}]},{"description":"Check if two objects are not equal, according to the following rules:\n\n* Numbers, booleans and strings are equal if they have the same value\n* Symbols are equal if they have the same name\n* Arrays are equal if all entries are equal\n","tags":{},"name":"!=","params":[{"name":"a","type":":Obj","description":"Object a"},{"name":"b","type":":Obj","description":"Object b"}],"returns":[{"type":":Bool","description":"true if the objects are not equal, false otherwise"}]},{"description":"Check if two objects are approximately equal, according to the following rules:\n\n* Numbers are approximately equal if the difference is smaller than or equal to the tolerance\n* Arrays are approximately equal if all entries are approximately equal\n* For all other types, the tolerance is ignored and the `=` operator is used\n","tags":{"example":["1.25 1.0 0.3 ~= # returns true"]},"name":"~=","params":[{"name":"a","type":":Obj","description":"Object a"},{"name":"b","type":":Obj","description":"Object b"},{"name":"tolerance","type":":Num","description":"Tolerance for comparing numbers"}],"returns":[{"type":":Bool","description":"true if the objects are approximately equal, false otherwise"}]},{"description":"Check if two objects are not approximately equal, according to the following rules:\n\n* Numbers are approximately equal if the difference is smaller than or equal to the tolerance\n* Arrays are approximately equal if all entries are approximately equal\n* For all other types, the tolerance is ignored and the `=` operator is used\n","tags":{"example":["1.25 1.0 0.3 !~= # returns false"]},"name":"!~=","params":[{"name":"a","type":":Obj","description":"Object a"},{"name":"b","type":":Obj","description":"Object b"},{"name":"tolerance","type":":Num","description":"Tolerance for comparing numbers"}],"returns":[{"type":":Bool","description":"true if the objects are not approximately equal, false otherwise"}]},{"description":"Run `then` if the `condition` is true or `else` otherwise.","tags":{"example":["i 2 < {\n  # this is executed if i is less than 2\n} {\n  # this is executed otherwise\n} if"]},"name":"if","params":[{"name":"condition","type":":Bool","description":"A condition"},{"name":"then","type":":ExeArr","description":"Code to run if the condition is true"},{"name":"else","type":":ExeArr","description":"Code to run if the condition is false (optional)"}],"returns":[]},{"description":"Execute the first condition that returns `true`. Only the executable array of the first matching condition is executed.","tags":{"example":["# fizz buzz implementation (x is a number)\n[\n  { x 15 mod 0 = } { \"fizz buzz\" println }\n  { x 3 mod 0 = } { \"fizz\" println }\n  { x 5 mod 0 = } { \"buzz\" println }\n  { true } { x println }\n] cond"]},"name":"cond","params":[{"name":"conditions","type":":Arr","description":"Array of executable arrays, always pairs of an executable array that calculates a condition and an executable array that is executed if the condition is true"}],"returns":[]},{"description":"Create a function that wraps `cond`.","tags":{"example":["# fizz buzz implementation\nfizzbuzz: (x :Int) {\n  { x 15 mod 0 = } { \"fizz buzz\" println }\n  { x 3 mod 0 = } { \"fizz\" println }\n  { x 5 mod 0 = } { \"buzz\" println }\n  { true } { x println }\n} cond-fun\n30 fizzbuzz # prints \"fizz buzz\""]},"name":"cond-fun","params":[{"name":"name","type":":Sym","description":"Symbol for the function name"},{"name":"params","type":":Params","description":"Parameter list of the function"},{"name":"conditions","type":":Arr","description":"Array of executable arrays, always pairs of an executable array that calculates a condition and an executable array that is executed if the condition is true"}],"returns":[]},{"description":"Execute the given executable array until the loop is exited with `break` or `breakif`.","tags":{"example":["{\n  1000 sleep\n  \"1 second passed\" println\n} loop"]},"name":"loop","params":[{"name":"body","type":":ExeArr","description":"Executable array to run in a loop"}],"returns":[]},{"description":"Execute the given executable array for every even number between lower (inclusive) and upper (exclusive).\nBefore every iteration, the current value is pushed on the stack.","tags":{"example":["1 10 { println } for # prints the numbers from 1 to 9"]},"name":"for","params":[{"name":"lower","type":":Int","description":"Start of the range (inclusive)"},{"name":"upper","type":":Int","description":"End of the range (exclusive)"},{"name":"body","type":":ExeArr","description":"Executable array to run for number in the range"}],"returns":[]},{"description":"Execute the given executable array for every item of the array.\nBefore every iteration, the current item is pushed on the stack.","tags":{"example":["[ 1 2 3 4 ] { 7 * println } for # prints 7, 14, 21, 28"]},"name":"for","params":[{"name":"arr","type":":Arr","description":"Array to iterate through"},{"name":"body","type":":ExeArr","description":"Executable array to run for every item"}],"returns":[]},{"description":"Execute the given executable array for character of the string.\nBefore every iteration, the current character is pushed on the stack.","tags":{"example":["\"hello\" { println } for # prints h, e, l, l, o (one letter per line)"]},"name":"for","params":[{"name":"str","type":":Str","description":"A string"},{"name":"body","type":":ExeArr","description":"Executable array to run for every character"}],"returns":[]},{"description":"Execute the given executable array for every item of the array.\nBefore every iteration, the current item and index are pushed on the stack.","tags":{"example":["[ \"a\", \"b\", \"c\" ] {\n  i! v! # bind current index and item to variables\n  \"item %d is %s\" [i v] printfln\n} fori"]},"name":"fori","params":[{"name":"arr","type":":Arr","description":"Array to iterate through"},{"name":"body","type":":ExeArr","description":"Executable array to run for every item"}],"returns":[]},{"description":"Execute the given executable array for character of the string.\nBefore every iteration, the current character and index are pushed on the stack.","tags":{"example":["\"hello\" {\n  i! l! # bind current index and character to variables\n  \"character %d is %s\" [i l] printfln\n} fori"]},"name":"fori","params":[{"name":"str","type":":Str","description":"A string"},{"name":"body","type":":ExeArr","description":"Executable array to run for every character"}],"returns":[]},{"description":"Break the current loop.","tags":{"example":["0 i!\n{\n  i 1 + i!\n  # ...\n  i 5 = { break } if # leave the loop when i is 5\n} loop"]},"name":"break","params":[],"returns":[]},{"description":"Break the current loop if the condition is true.","tags":{"example":["0 i!\n{\n  i 1 + i!\n  # ...\n  i 5 = breakif # leave the loop when i is 5\n} loop"]},"name":"breakif","params":[{"name":"condition","type":":Bool","description":"A condition"}],"returns":[]},{"description":"Raise an error. This stops the program immediately.","tags":{"example":["\"This is an error.\" err"]},"name":"err","params":[{"name":"message","type":":Str","description":"An error message"}],"returns":[]},{"description":"Leave the current lambda function and call a function from the dictionary.","tags":{},"name":"tailcall","params":[{"name":"fn","type":":Sym","description":"Name of the function to call, must be in the dictionary"}],"returns":[]},{"description":"Execute an object.","tags":{"example":["{ #< more code here ># } exec # executes the executable array"]},"name":"exec","params":[{"name":"obj","type":":Obj","description":"Object to execute"}],"returns":[]},{"description":"Create a function and save it into the current dictionary.","tags":{"example":["#<\nCalculate the square of a number."]},"name":"fun","params":[{"name":"name","type":":Sym","description":"Symbol for the function name"},{"name":"params","type":":Params","description":"Parameter list of the function (optional)"},{"name":"body","type":":ExeArr","description":"Function body"}],"returns":[]},{"description":"Create a lambda function. This is like `fun` but puts the function on the stack and not in the dictionary.","tags":{},"name":"lam","params":[{"name":"params","type":":Params","description":"Parameter list of the function (optional)"},{"name":"body","type":":ExeArr","description":"Function body"}],"returns":[{"type":":Lam","description":"Lambda function"}]},{"description":"Take a snapshot of the current dictionary and set copies of it as dictionary of the given functions.","tags":{"example":["2 x!\nx-squared: {\n  x x *\n} fun\nx-squared # returns 4\n5 x!\nx-squared # still returns 4\n[:x-squared] update-lam\nx-squared # returns 25"]},"name":"update-lam","params":[{"name":"functions","type":":Arr","description":"Array of symbols of the functions to update"}],"returns":[]},{"description":"Pop values from the stack and bind them to the parameter list, that is, put them into the current dictionary with the names from the parameter list. An error is thrown if types don't match.","tags":{"example":["42\n\"a string\"\n(a :Int, s :Str) popv\na # 42\ns # \"a string\""]},"name":"popv","params":[{"name":"params","type":":Params","description":"Parameter list to bind the stack content to"}],"returns":[]},{"description":"Get the value of the given symbol from the current dictionary and put it on the stack, without executing it.","tags":{"example":["demo: { \"test\" println } fun\n:demo vref # get a reference to demo, but don't execute it\nexec # execute the reference (prints \"test\")"]},"name":"vref","params":[{"name":"sym","type":":Sym","description":"Name of a dictionary entry"}],"returns":[{"type":":Obj","description":"Value of the dictionary entry"}]},{"description":"Check if an object is an empty array or executable array or nil.","tags":{"example":["[1, 2, 3] empty? # false\n[] empty? # true"]},"name":"empty?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if the object is an empty array or executable array or nil, false otherwise"}]},{"description":"Put a value in the dictionary under the specified name.","tags":{"example":["42 x!\nx # put the value of x (42) on the stack"]},"name":"!","params":[{"name":"name","type":":Sym","description":"Name of the dictionary entry"},{"name":"value","type":":Obj","description":"value"}],"returns":[]},{"description":"Define a new data type. This will generate a constructor, a type check function and accessors and put them into the dictionary.","tags":{},"name":"datadef","params":[{"name":"name","type":":Sym","description":"Name of the type"},{"name":"definition","type":":Params","description":"Definition of fields"}],"returns":[]},{"description":"Define a union data type that can be one of the given data types. This puts a union type check function into the dictionary.","tags":{},"name":"datadef","params":[{"name":"name","type":":Sym","description":"Name of the union type"},{"name":"variants","type":":Arr","description":"Data types the union should contain"}],"returns":[]},{"description":"Check if a and b are true.","tags":{},"name":"and","params":[{"name":"a","type":":Bool","description":"A boolean"},{"name":"b","type":":Bool","description":"A boolean"}],"returns":[{"type":":Bool","description":"True if a and b are true, false otherwise"}]},{"name":"and","params":[{"name":"arr","type":":Arr"}],"returns":[{"type":":Bool"}]},{"description":"Check if a or b is true, or both are true.","tags":{},"name":"or","params":[{"name":"a","type":":Bool","description":"A boolean"},{"name":"b","type":":Bool","description":"A boolean"}],"returns":[{"type":":Bool","description":"True if a or b are true, false otherwise"}]},{"name":"or","params":[{"name":"arr","type":":Arr"}],"returns":[{"type":":Bool"}]},{"description":"Negate a boolean value.","tags":{},"name":"not","params":[{"name":"b","type":":Bool","description":"A boolean"}],"returns":[{"type":":Bool","description":"True if the boolean is false, false otherwise"}]},{"description":"Add two numbers.","tags":{},"name":"+","params":[{"name":"a","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"The sum of the two numbers"}]},{"description":"Concatenate the two strings.","tags":{},"name":"+","params":[{"name":"a","type":":Str","description":"A string"},{"name":"b","type":":Str","description":"A string"}],"returns":[{"type":":Str","description":"The concatenated string"}]},{"description":"Concatenate the two arrays.","tags":{},"name":"+","params":[{"name":"a","type":":Arr","description":"An array"},{"name":"b","type":":Arr","description":"An array"}],"returns":[{"type":":Arr","description":"The concatenated array"}]},{"description":"Subtract two numbers.","tags":{},"name":"-","params":[{"name":"a","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"The difference of the two numbers"}]},{"description":"Multiply two numbers.","tags":{},"name":"*","params":[{"name":"a","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"The product of the two numbers"}]},{"description":"Divide two numbers.","tags":{},"name":"/","params":[{"name":"a","type":":Num","description":"Dividend"},{"name":"b","type":":Num","description":"Divisor"}],"returns":[{"type":":Flt","description":"The quotient of the two numbers"}]},{"description":"Divide two numbers and discard the remainder.","tags":{},"name":"i/","params":[{"name":"a","type":":Num","description":"Dividend"},{"name":"b","type":":Num","description":"Divisor"}],"returns":[{"type":":Int","description":"The quotient of the two numbers, without the remainder"}]},{"description":"Calculate the remainder of a divison.","tags":{},"name":"mod","params":[{"name":"a","type":":Num","description":"Dividend"},{"name":"b","type":":Num","description":"Divisor"}],"returns":[{"type":":Num","description":"The remainder of the division"}]},{"description":"Get the signum of a number.","tags":{},"name":"sign","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Int","description":"-1 of x is negative, 1 if x is positive, 0 if x is 0"}]},{"description":"Get the absolute value of a number.","tags":{},"name":"abs","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"Absolute value of the number"}]},{"description":"Get the minimum of two numbers.","tags":{},"name":"min","params":[{"name":"a","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"The smaller number"}]},{"description":"Get the maximum of two numbers.","tags":{},"name":"max","params":[{"name":"a","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"A number"}],"returns":[{"type":":Num","description":"The larger number"}]},{"description":"Calculate the sine function at the given angle.","tags":{},"name":"sin","params":[{"name":"x","type":":Num","description":"Angle, in radiants"}],"returns":[{"type":":Flt","description":"Value of the sine function at x"}]},{"description":"Calculate the inverse sine function for the given value.","tags":{},"name":"asin","params":[{"name":"x","type":":Num","description":"X value"}],"returns":[{"type":":Flt","description":"Value of the inverse sine function at x"}]},{"description":"Calculate the cosine function at the given angle.","tags":{},"name":"cos","params":[{"name":"x","type":":Num","description":"Angle, in radiants"}],"returns":[{"type":":Flt","description":"Value of the cosine function at x"}]},{"description":"Calculate the inverse cosine function for the given value.","tags":{},"name":"acos","params":[{"name":"x","type":":Num","description":"X value"}],"returns":[{"type":":Flt","description":"Value of the inverse cosine function at x"}]},{"description":"Calculate the tangent function at the given angle.","tags":{},"name":"tan","params":[{"name":"x","type":":Num","description":"Angle, in radiants"}],"returns":[{"type":":Flt","description":"Value of the tangent function at x"}]},{"description":"Calculate the inverse tangent function for the given value.","tags":{},"name":"atan","params":[{"name":"x","type":":Num","description":"X value"}],"returns":[{"type":":Flt","description":"Value of the inverse tangent function at x"}]},{"description":"Calculate the angle from the X axis to a point.","tags":{},"name":"atan2","params":[{"name":"y","type":":Num","description":"Y coordinate of a point"},{"name":"x","type":":Num","description":"X coordinate of a point"}],"returns":[{"type":":Flt","description":"Angle from the X axis to the point, in radiants"}]},{"description":"Get the nearest integer that is equal to or greater than the given number.","tags":{},"name":"ceil","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Int","description":"The nearest integer that is equal to or greater than x"}]},{"description":"Get the nearest integer that is equal to or smaller than the given number.","tags":{},"name":"floor","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Int","description":"The nearest integer that is equal to or smaller than x"}]},{"description":"Calculate the square root of a number.","tags":{},"name":"sqrt","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Flt","description":"The square root of x"}]},{"description":"Calculate e raised to the power of a value.","tags":{},"name":"exp","params":[{"name":"x","type":":Num","description":"The exponent"}],"returns":[{"type":":Flt","description":"e raised to the power of x"}]},{"description":"Calculate a base value raised to the power of a given exponent.","tags":{},"name":"pow","params":[{"name":"b","type":":Num","description":"The base"},{"name":"n","type":":Num","description":"The exponent"}],"returns":[{"type":":Flt","description":"b raised to the power of n"}]},{"description":"Calculate the natural logarithm of a number.","tags":{},"name":"ln","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Flt","description":"Natural logarithm of x"}]},{"description":"Calculate the logarithm of a number, with respect to a given base.","tags":{},"name":"log","params":[{"name":"x","type":":Num","description":"A number"},{"name":"b","type":":Num","description":"The base"}],"returns":[{"type":":Flt","description":"The logarithm of x with respect to base b"}]},{"description":"Get the nearest integer of the given number.","tags":{},"name":"round","params":[{"name":"x","type":":Num","description":"A number"}],"returns":[{"type":":Int","description":"The nearest integer of the number"}]},{"description":"Get a random float between 0 (inclusive) and 1 (exclusive).","tags":{},"name":"rand-flt","params":[],"returns":[{"type":":Flt","description":"A random float between 0 (inclusive) and 1 (exclusive)"}]},{"description":"Get a pseudo-random integer between 0 (inclusive) and n (exclusive).","tags":{},"name":"rand-int","params":[{"name":"n","type":":Int","description":"Upper bound of the random number, must be positive"}],"returns":[{"type":":Int","description":"A random integer between 0 (inclusive) and n (exclusive)"}]},{"description":"Initialize the random number generator with the given seed. When initialized\nwith the same seed, the generated random numbers will be deterministic.","tags":{"example":["1 rand-seed # seed the random number generator\n10 rand-int # 2\n10 rand-int # 4"]},"name":"rand-seed","params":[{"name":"seed","type":":Int","description":"Any number to be used as seed"}],"returns":[]},{"description":"Swap the two topmost objects on the stack.","tags":{},"name":"swap","params":[{"name":"a","type":":Obj","description":"An object"},{"name":"b","type":":Obj","description":"Another object"}],"returns":[{"type":":Obj","description":"Object b"},{"type":":Obj","description":"Object a"}]},{"description":"Remove the topmost object from the stack.","tags":{},"name":"pop","params":[{"name":"obj","type":":Obj","description":"An object"}],"returns":[]},{"description":"Duplicate the topmost object on the stack.","tags":{},"name":"dup","params":[{"name":"obj","type":":Obj","description":"An object"}],"returns":[{"type":":Obj","description":"The object"},{"type":":Obj","description":"Copy of the object"}]},{"description":"Copy the i-th object (from top) of the stack on top of the stack.","tags":{"example":["1 2 3 4 5 # put some elements on the stack\n4 copy # returns the 4th element from top, i.e. 1"]},"name":"copy","params":[{"name":"i","type":":Int","description":"Offset of the object to copy, from the top of the stack"}],"returns":[{"type":":Obj","description":"The copied object"}]},{"description":"Clear the stack.","tags":{},"name":"clear","params":[],"returns":[]},{"description":"Get the number of items on the stack. Inside of functions, this only includes items that can be accessed by the function, i.e. those that were pushed onto the stack by this function.","tags":{},"name":"stack-count","params":[],"returns":[{"type":":Int","description":"Number of items on the stack"}]},{"description":"Remove whitespace from the start and end of a string.","tags":{"example":["\"  test \" trim # \"test\""]},"name":"trim","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Str","description":"Trimmed string"}]},{"description":"Transform a string to lower-case.","tags":{"example":["\"dEmO\" lower-case # \"demo\""]},"name":"lower-case","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Str","description":"String in lower-case"}]},{"description":"Transform a string to upper-case.","tags":{"example":["\"dEmO\" upper-case # \"DEMO\""]},"name":"upper-case","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Str","description":"String in upper-case"}]},{"description":"Get the characters of a string.","tags":{"example":["\"test\" str->chars # returns [116, 101, 115, 116]"]},"name":"str->chars","params":[{"name":"str","type":":Str","description":"String"}],"returns":[{"type":":Arr","description":"Array of character codes"}]},{"description":"Create a string from an array of character codes.","tags":{"example":["[116, 101, 115, 116] chars->str # returns \"test\""]},"name":"chars->str","params":[{"name":"chars","type":":Arr","description":"Characters codes"}],"returns":[{"type":":Str","description":"String with the given character codes"}]},{"description":"Get the character of a given character code.","tags":{"example":["65 char->str # \"A\""]},"name":"char->str","params":[{"name":"char","type":":Int","description":"Character code"}],"returns":[{"type":":Str","description":"Character as string"}]},{"description":"Split a string using a regular expression. The string is split wherever it matches.","tags":{"example":["\"a,b,c,d\" \",\" split # returns [\"a\", \"b\", \"c\", \"d\"]"]},"name":"split","params":[{"name":"str","type":":Str","description":"String"},{"name":"regex","type":":Str","description":"A regular expression"}],"returns":[{"type":":Arr","description":"Splitted parts"}]},{"description":"Replace the first match of a regular expression in a string.","tags":{"example":["\"test\" \"t\" \"r\" replace-first # returns \"rest\""]},"name":"replace-first","params":[{"name":"str","type":":Str","description":"String"},{"name":"regex","type":":Str","description":"A regular expression"},{"name":"replace","type":":Str","description":"String to replace the match with"}],"returns":[{"type":":Str","description":"Modified string"}]},{"description":"Replace the all matches of a regular expression in a string.","tags":{"example":["\"test\" \"t\" \"r\" replace-all # returns \"resr\""]},"name":"replace-all","params":[{"name":"str","type":":Str","description":"String"},{"name":"regex","type":":Str","description":"A regular expression"},{"name":"replace","type":":Str","description":"String to replace the matches with"}],"returns":[{"type":":Str","description":"Modified string"}]},{"description":"Format the given string using the given parameters.\nThis uses a C-style format string, e.g. `%d` is used for integers, `%s` for strings and so on.","tags":{"example":["\"1 + 1 = %d\" [1 1 +] format # returns \"1 + 1 = 2\""]},"name":"format","params":[{"name":"format","type":":Str","description":"Format string"},{"name":"params","type":":Arr","description":"Parameters"}],"returns":[{"type":":Str","description":"Formatted string"}]},{"description":"Test if the given value is equal to the expected value.","tags":{},"name":"test=","params":[{"name":"actual","description":"Actual value"},{"name":"expected","description":"Expected value"}],"returns":[]},{"description":"Test if the given value is not equal to a value.","tags":{},"name":"test!=","params":[{"name":"actual","description":"Actual value"},{"name":"notExpected","description":"Value that the actual value should not be equal to"}],"returns":[]},{"description":"Test if the given value is approximately equal to the expected value.","tags":{},"name":"test~=","params":[{"name":"actual","description":"Actual value"},{"name":"expected","description":"Expected value"},{"name":"tolerance","type":":Num","description":"Tolerance for comparing numbers"}],"returns":[]},{"description":"Test if the given value is not approximately equal to a value.","tags":{},"name":"test!~=","params":[{"name":"actual","description":"Actual value"},{"name":"notExpected","description":"Value that the actual value should not be approximately equal to"},{"name":"tolerance","type":":Num","description":"Tolerance for comparing numbers"}],"returns":[]},{"description":"Show test statistics, i.e. the number of passed, failed and total tests.","tags":{},"name":"test-stats","params":[],"returns":[]},{"description":"Get the current time in milliseconds since January 1, 1970 00:00:00 UTC.","tags":{},"name":"time-millis","params":[],"returns":[{"type":":Int","description":"Current time in milliseconds"}]},{"description":"Pause execution for the given delay.","tags":{},"name":"sleep","params":[{"name":"delay","type":":Int","description":"Sleep time in milliseconds"}],"returns":[]},{"description":"Get the type of an object.","tags":{"returns":["\"a string\" type # returns :Str"]},"name":"type","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Sym","description":"The type of the object"}]},{"description":"Check if the given object is an array or executable array.","tags":{},"name":"arr?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is an array or executable array, false otherwise"}]},{"description":"Check if the given object is a boolean.","tags":{},"name":"bool?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a boolean, false otherwise"}]},{"description":"Check if the given object is an executable array.","tags":{},"name":"exearr?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is an executable array, false otherwise"}]},{"description":"Check if the given object is a float.","tags":{},"name":"flt?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a float, false otherwise"}]},{"description":"Check if the given object is an integer.","tags":{},"name":"int?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is an integer, false otherwise"}]},{"description":"Check if the given object is nil.","tags":{},"name":"nil?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is nil, false otherwise"}]},{"description":"Check if the given object is a number.","tags":{},"name":"num?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a number, false otherwise"}]},{"description":"Check if the given object is an object (i.e. not nil).","tags":{},"name":"obj?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is an object and not nil."}]},{"description":"Check if the given object is a parameter list.","tags":{},"name":"params?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a parameter list, false otherwise"}]},{"description":"Check if the given object is a string.","tags":{},"name":"str?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a string, false otherwise"}]},{"description":"Check if the given object is a symbol.","tags":{},"name":"sym?","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Bool","description":"True if obj is a symbol, false otherwise"}]},{"description":"Convert the given object to a string.","tags":{"example":["10 str # returns the string \"10\""]},"name":"str","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Str","description":"String representation of the object"}]},{"description":"Convert the given object to a float.","tags":{"example":["\"3.14\" flt # returns 3.14 as :Flt","\"not a number\" flt # returns nil"]},"name":"flt","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Flt","description":"Object parsed to a float, or `nil` if not possible"}]},{"description":"Convert the given object to an integer.","tags":{"example":["\"1\" int # returns 1 as :Int","\"not a number\" int # returns nil"]},"name":"int","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Int","description":"Object parsed to an integer, or `nil` if not possible"}]},{"description":"Convert the given object to a symbol.","tags":{"example":["\"test\" sym # returns :test"]},"name":"sym","params":[{"name":"obj","type":":Obj","description":"String or symbol"}],"returns":[{"type":":Sym","description":"The specified symbol or a new symbol with the given name if the argument is a string"}]},{"description":"Convert the given object to an executable array. If the object is an array, the items are wrapped in an executable array. Otherwise, a new executable array that only contains the given object is created.","tags":{},"name":"exearr","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":ExeArr","description":"Executable array"}]},{"description":"Convert the given object to an array. If the object is an executable array, the items are wrapped in an array. Otherwise, a new array that only contains the given object is created.","tags":{},"name":"arr","params":[{"name":"obj","type":":Obj","description":"Object"}],"returns":[{"type":":Arr","description":"Array"}]}],"variables":[{"description":"The mathematical constant Pi.","tags":{},"name":"PI"}]}
