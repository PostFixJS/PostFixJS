#<
Get the type of an object.
@param obj Object
@return The type of the object
@returns "a string" type # returns :Str
>#
type: (obj :Obj -> :Sym) {} fun

#<
Check if the given object is an array or executable array.
@param obj Object
@return True if obj is an array or executable array, false otherwise
>#
arr?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a boolean.
@param obj Object
@return True if obj is a boolean, false otherwise
>#
bool?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is an executable array.
@param obj Object
@return True if obj is an executable array, false otherwise
>#
exearr?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a float.
@param obj Object
@return True if obj is a float, false otherwise
>#
flt?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is an integer.
@param obj Object
@return True if obj is an integer, false otherwise
>#
int?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is nil.
@param obj Object
@return True if obj is nil, false otherwise
>#
nil?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a number.
@param obj Object
@return True if obj is a number, false otherwise
>#
num?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is an object (i.e. not nil).
@param obj Object
@return True if obj is an object and not nil.
>#
obj?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a parameter list.
@param obj Object
@return True if obj is a parameter list, false otherwise
>#
params?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a string.
@param obj Object
@return True if obj is a string, false otherwise
>#
str?: (obj :Obj -> :Bool) {} fun

#<
Check if the given object is a symbol.
@param obj Object
@return True if obj is a symbol, false otherwise
>#
sym?: (obj :Obj -> :Bool) {} fun

#<
Convert the given object to a string.
@param obj Object
@return String representation of the object
@example 10 str # returns the string "10"
>#
str: (obj :Obj -> :Str) {} fun

#<
Convert the given object to a float.
@param obj Object
@return Object parsed to a float, or `nil` if not possible
@example "3.14" flt # returns 3.14 as :Flt
@example "not a number" flt # returns nil
>#
flt: (obj :Obj -> :Flt) {} fun

#<
Convert the given object to an integer.
@param obj Object
@return Object parsed to an integer, or `nil` if not possible
@example "1" int # returns 1 as :Int
@example "not a number" int # returns nil
>#
int: (obj :Obj -> :Int) {} fun

#<
Convert the given object to a symbol.
@param obj String or symbol
@return The specified symbol or a new symbol with the given name if the argument is a string
@example "test" sym # returns :test
>#
sym: (obj :Obj -> :Sym) {} fun

#<
Convert the given object to an executable array. If the object is an array, the items are wrapped in an executable array. Otherwise, a new executable array that only contains the given object is created.
@param obj Object
@return Executable array
>#
exearr: (obj :Obj -> :ExeArr) {} fun

#<
Convert the given object to an array. If the object is an executable array, the items are wrapped in an array. Otherwise, a new array that only contains the given object is created.
@param obj Object
@return Array
>#
arr: (obj :Obj -> :Arr) {} fun
