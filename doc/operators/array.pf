#<
Get the length of a string.
@param str String
@return Length of the string
>#
length: (str :Str -> :Int) {} fun

#<
Get the length of an array.
@param arr Array
@return Length of the array
>#
length: (arr :Arr -> :Int) {} fun

#<
Get the i-th character of a string.
@param str String
@param i Zero-based index of a character in the string
@return The i-th character of the string
>#
get: (str :Str, i :Int -> :Str) {} fun

#<
Get the i-th item of an array.
@param arr Array
@param i Zero-based index of the item to get
@return The i-th element in the array
>#
get: (arr :Arr, i :Int -> :Obj) {} fun

#<
Set the i-th character of a string.
@param str String
@param i Zero-based index of a character in the string
@return The updated stringPolar
>#
set: (str :Str, i :Int -> :Str) {} fun

#<
Set the i-th item of an array.
@param arr Array
@param i Zero-based index of the item to set
@return The updated array
>#
set: (arr :Arr, i :Int -> :Arr) {} fun

#<
Get the item after the first item in the array that is equal to the given key.
E.g., `[ :a 1 :b 2 ] :a 0 key-get` would return the value after `:a`, which is `1`.
@param arr Array
@param key Key
@param default Default value that is returned when the key is not found in the array
@return The value at the given key or the default value if the key is not found
>#
key-get: (arr :Arr, key :Obj, default :Obj -> :Obj) {} fun

#<
Set the item after the first item in the array that is equal to the given key. If the key is not found, it is appended to the array.
@param arr Array
@param key Key
@param value Value to assign at the given key
@return The modified array
>#
key-set: (arr :Arr, key :Obj, value :Obj -> :Arr) {} fun

#<
Update the value of a key in the array by executing an executable array.
@param arr Array
@param key Key
@param default Default value that is used when the key is not found in the array
@param updater Executable array that is called with the value of the key (or the default value) on top of the stack and must push the updated value on the stack
@return The modified array
>#
key-update: (arr :Arr, key :Obj, default :Obj, updater :ExeArr -> :Arr) {} fun

#<
Update the value of a nested array. The keys are the indices of the value.
@param arr Array
@param keys Keys to the position of the value to update
@param value Value to assign at the given index
@return The modified array
>#
path-set: (arr :Arr, keys :Arr, value :Obj -> :Arr) {} fun

#<
Set the value of a key in a nested array. The keys are the keys of the value.
@param arr Array
@param keys Path of keys to the value to change
@param value Value to assign at the given key
@return The modified array
>#
path-key-set: (arr :Arr, keys :Arr, value :Obj -> :Arr) {} fun

#<
Update the value of a key in a nested array by executing an executable array. The keys are the keys of the value.
@param arr Array
@param keys Path of keys to the value to update
@param default Default value that is used when the key is not found in the array
@param updater Executable array that is called with the value of the key (or the default value) on top of the stack and must push the updated value on the stack
@return The modified array
>#
path-update: (arr :Arr, keys :Arr, default :Obj, updater :ExeArr -> :Arr) {} fun

#<
Shuffle the given array.
Internally, this function uses rand-int, so it is deterministic when the seed is known.
@param arr Array
@return The shuffled array
>#
shuffle: (arr :Arr -> :Arr) {} fun

#<
Reverse the given array.
@param arr Array
@return A new array with the items in reverse order
>#
reverse: (arr :Arr -> :Arr) {} fun

#<
Reverse the given string.
@param str String
@return The reversed string
>#
reverse: (str :Str -> :Str) {} fun

#<
Append a value to an array.
@param arr Array
@param value Value to append
@return Modified array
>#
append: (arr :Arr, value :Obj -> :Arr) {} fun

#<
Remove the first item that is equal to the given value from the array.
@param arr Array
@param value Value to remove
@return Array with the first occurence of the given value removed
>#
remove: (arr :Arr, value :Obj -> :Arr) {} fun

#<
Remove the item at the given zero-based index from the array.
@param arr Array
@param index Zero-based index of the item to remove
@return Array with the given index removed
>#
remove-at: (arr :Arr, index :Int -> :Arr) {} fun

#<
Remove the character at the given zero-based index from the string.
@param str String
@param index Zero-based index of the character to remove
@return String with the character at the given index removed
>#
remove-at: (str :Str, index :Int -> :Str) {} fun

#<
Find the index of the first occurence of an object in an array.
@param arr Array to search in
@param value Object to search for
@return Zero-based index of the object in the array or nil if not found
>#
find: (arr :Arr, value :Obj -> :Int) {} fun

#<
Find the index of the first occurence of a substring in a string.
@param str String to search in
@param value Value to search for, will be converted to :Str automatically
@return Zero-based index of the substring in the string or nil if not found
>#
find: (str :Str, value :Obj -> :Int) {} fun

#<
Find the index of the first occurence of an object in an array, beginning at the given start index.
@param arr Array to search in
@param value Object to search for
@param startAt Zero-based start index of the search
@return Zero-based index of the object in the array or nil if not found
>#
find-from: (arr :Arr, value :Obj, startAt :Int -> :Int) {} fun

#<
Find the index of the first occurence of a substring in a string.
@param str String to search in
@param value Value to search for, will be converted to :Str automatically
@param startAt Zero-based start index of the search
@return Zero-based index of the substring in the string or nil if not found
>#
find-from: (str :Str, value :Obj, startAt :Int -> :Int) {} fun

#<
Check if an array contains the given value.
@param arr Array
@param value Value
@return True if the array contains the given value, false otherwise
>#
contains: (arr :Arr, value :Obj -> :Bool) {} fun

#<
Check if a string contains the given value.
@param str String
@param value Value, will be converted to :Str automatically
@return True if the string contains the given value
>#
contains: (str :Str, value :Obj -> :Bool) {} fun

#<
Get a portion of an array, including all items from start (inclusive) to
end (exclusive). If no end is specified, all items from start will be included.
@param arr Array
@param start Zero-based index of the first item to include
@param end Zero-based index of the first item that should not be included (optional)
@return A new array containing the items in the given range
>#
slice: (arr :Arr, start :Int, end :Int -> :Arr) {} fun

#<
Get a portion of a string, including all characters from start (inclusive) to
end (exclusive). If no end is specified, all characters from start will be included.
@param str String
@param start Zero-based index of the first character to include
@param end Zero-based index of the first character that should not be included (optional)
@return The extracted substring
>#
slice: (str :Str, start :Int, end :Int -> :Str) {} fun

#<
Insert an item into an array.
@param arr Array
@param index Zero-based index at which to insert the item
@param value Item to insert
@return Array with the item inserted
>#
insert: (arr :Arr, index :Int, value :Obj -> :Arr) {} fun

#<
Insert a character into a string.
@param str String
@param index Zero-based index at which to insert the character
@param character Character to insert
@return String with the character inserted
>#
insert: (str :Str, index :Int, character :Int -> :Str) {} fun

#<
Create a new array with the given length and initialize it.
@param length Length of the array
@param initializer Executable array that will be executed for every array entry, the zero-based index is put on top of the stack and the value that the executable array pushes onto the stack is put into the array
@return Array with the given length and values produced by the initializer
>#
array: (length :Int, initializer :ExeArr -> :Arr) {} fun

#<
Create a new array with the given length and set all items to the given value.
@param length Length of the array
@param value Value to set all array items to
@return Array with the given length and values
>#
array: (length :Int, value :Obj -> :Arr) {} fun

#<
Sort an array.
@param arr Array
@return Sorted array
>#
sort: (arr :Arr -> :Arr) {} fun
