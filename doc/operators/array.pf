#<
Get the length of a string.
@param str String
@return Length of the string
>#
length: (str :Str -> :Int) {} fun

#<
Get the length of an array.
@param arr Array
@return Length of the array
>#
length: (arr :Arr -> :Int) {} fun

#<
Get the i-th character of a string.
@param str String
@param i Zero-based index of a character in the string
@return The i-th character of the string
>#
get: (str :Str, i :Int -> :Str) {} fun

#<
Get the i-th item of an array.
@param arr Array
@param i Zero-based index of the item to get
@return The i-th element in the array
>#
get: (arr :Arr, i :Int -> :Obj) {} fun

#<
Set the i-th character of a string.
@param str String
@param i Zero-based index of a character in the string
@return The updated stringPolar
>#
set: (str :Str, i :Int -> :Str) {} fun

#<
Set the i-th item of an array.
@param arr Array
@param i Zero-based index of the item to set
@return The updated array
>#
set: (arr :Arr, i :Int -> :Arr) {} fun

#<
Get the item after the first item in the array that is equal to the given key.
E.g., `[ :a 1 :b 2 ] :a 0 key-get` would return the value after `:a`, which is `1`.
@param arr Array
@param key Key
@param default Default value that is returned when the key is not found in the array
@return The value at the given key or the default value if the key is not found
>#
key-get: (arr :Arr, key :Obj, default :Obj -> :Obj) {} fun

#<
Set the item after the first item in the array that is equal to the given key. If the key is not found, it is appended to the array.
@param arr Array
@param key Key
@param value Value to assign at the given key
@return The modified array
>#
key-set: (arr :Arr, key :Obj, value :Obj -> :Arr) {} fun

#<
Shuffle the given array.
Internally, this function uses rand-int, so it is deterministic when the seed is known.
@param arr Array
@return The shuffled array
>#
shuffle: (arr :Arr -> :Arr) {} fun

#<
Reverse the given array.
@param arr Array
@return A new array with the items in reverse order
>#
reverse: (arr :Arr -> :Arr) {} fun

#<
Reverse the given string.
@param str String
@return The reversed string
>#
reverse: (str :Str -> :Str) {} fun

#<
Append a value to an array.
@param arr Array
@param value Value to append
@return Modified array
>#
append: (arr :Arr, value :Obj) {} fun

#<
Remove the first item that is equal to the given value from the array.
@param arr Array
@param value Value to remove
@return Array with the first occurence of the given value removed
>#
remove: (arr :Arr, value :Obj) {} fun

#<
Remove the item at the given zero-based index from the array.
@param arr Array
@param index Zero-based index of the item to remove
@return Array with the given index removed
>#
remove-at: (arr :Arr, index: :Int) {} fun

#<
Remove the character at the given zero-based index from the string.
@param str String
@param index Zero-based index of the character to remove
@return String with the character at the given index removed
>#
remove-at: (str :Str, index: :Int) {} fun

#<
Find the index of the first occurence of an object in an array.
@param arr Array to search in
@param value Object to search for
@return Zero-based index of the object in the array or nil if not found
>#
find: (arr :Arr, value :Obj) {} fun

#<
Find the index of the first occurence of a substring in a string.
@param str String to search in
@param value Substring to search for
@param Zero-based index of the substring in the string or nil if not found
>#
find: (str :Str, value :Obj) {} fun
